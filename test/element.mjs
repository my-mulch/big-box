import bb from '../index.mjs'
import jest from './engine.mjs'

export default jest.suite(function () {
    let A, B, C, D, E

    console.log('\n\n-------- Elementwise Suite --------\n\n')

    A = bb.tensor([
        [[[[17], [36]], [[29], [36]],
        [[-12], [21]]], [[[1], [21]],
        [[21], [24]], [[-5], [1]]]],

        [[[[35], [44]], [[21], [26]],
        [[-8], [-15]]], [[[-2], [16]],
        [[-13], [24]], [[7], [11]]]]
    ])

    B = bb.tensor([
        [[-46], [19]],
        [[-38], [9]],
        [[9], [-15]],
        [[-25], [-33]]
    ])

    C = bb.tensor([
        [[[10], [5], [2]],
        [[72], [6], [3]],
        [[91], [6], [1]],
        [[13], [4], [12]]],

        [[[57], [7], [1]],
        [[44], [2], [2]],
        [[49], [8], [4]],
        [[-33], [8], [5]]],

        [[[90], [2], [5]],
        [[66], [4], [3]],
        [[23], [1], [2]],
        [[21], [2], [2]]]])

    E = bb.tensor([
        [[1, 1], [10, 10], [100, 100]],
        [[1, 1], [10, 10], [100, 100]],
        [[1, 1], [10, 10], [100, 100]],
        [[1, 1], [10, 10], [100, 100]],
    ])


    const F = bb.tensor([
        [[[[0]], [[0]], [[0]]]],
        [[[[2]], [[2]], [[1]]]],
        [[[[4]], [[4]], [[2]]]],
        [[[[2]], [[2]], [[2]]]],
        [[[[3]], [[4]], [[3]]]],
    ])

    const G = bb.tensor([[
        [[[3], [2]],
        [[3], [3]],
        [[4], [2]]],

        [[[4], [4]],
        [[1], [2]],
        [[0], [3]]],

        [[[4], [1]],
        [[1], [1]],
        [[4], [1]]],

        [[[3], [3]],
        [[0], [3]],
        [[4], [3]]]]
    ])

    const H = bb.tensor([[[[[3], [2]],
    [[3], [3]],
    [[4], [2]]],

    [[[4], [4]],
    [[1], [2]],
    [[0], [3]]],

    [[[4], [1]],
    [[1], [1]],
    [[4], [1]]],

    [[[3], [3]],
    [[0], [3]],
    [[4], [3]]]],


    [[[[5], [4]],
    [[5], [5]],
    [[5], [3]]],

    [[[6], [6]],
    [[3], [4]],
    [[1], [4]]],

    [[[6], [3]],
    [[3], [3]],
    [[5], [2]]],

    [[[5], [5]],
    [[2], [5]],
    [[5], [4]]]],


    [[[[7], [6]],
    [[7], [7]],
    [[6], [4]]],

    [[[8], [8]],
    [[5], [6]],
    [[2], [5]]],

    [[[8], [5]],
    [[5], [5]],
    [[6], [3]]],

    [[[7], [7]],
    [[4], [7]],
    [[6], [5]]]],


    [[[[5], [4]],
    [[5], [5]],
    [[6], [4]]],

    [[[6], [6]],
    [[3], [4]],
    [[2], [5]]],

    [[[6], [3]],
    [[3], [3]],
    [[6], [3]]],

    [[[5], [5]],
    [[2], [5]],
    [[6], [5]]]],


    [[[[6], [5]],
    [[7], [7]],
    [[7], [5]]],

    [[[7], [7]],
    [[5], [6]],
    [[3], [6]]],

    [[[7], [4]],
    [[5], [5]],
    [[7], [4]]],

    [[[6], [6]],
    [[4], [7]],
    [[7], [6]]]]]
    )
    const I = bb.tensor([[[[[[2], [1]]],
    [[[1], [3]]]]],
    [[[[[2], [2]]],
    [[[3], [1]]]]]])

    const J = bb.tensor([[[[[[2]],
    [[0]]]],


    [[[[0]],
    [[4]]]]]])

    const K = bb.tensor([[[[[3], [2]],
    [[3], [3]],
    [[4], [2]]],

    [[[4], [4]],
    [[1], [2]],
    [[0], [3]]],

    [[[4], [1]],
    [[1], [1]],
    [[4], [1]]],

    [[[3], [3]],
    [[0], [3]],
    [[4], [3]]]],


    [[[[5], [4]],
    [[5], [5]],
    [[5], [3]]],

    [[[6], [6]],
    [[3], [4]],
    [[1], [4]]],

    [[[6], [3]],
    [[3], [3]],
    [[5], [2]]],

    [[[5], [5]],
    [[2], [5]],
    [[5], [4]]]],


    [[[[7], [6]],
    [[7], [7]],
    [[6], [4]]],

    [[[8], [8]],
    [[5], [6]],
    [[2], [5]]],

    [[[8], [5]],
    [[5], [5]],
    [[6], [3]]],

    [[[7], [7]],
    [[4], [7]],
    [[6], [5]]]],


    [[[[5], [4]],
    [[5], [5]],
    [[6], [4]]],

    [[[6], [6]],
    [[3], [4]],
    [[2], [5]]],

    [[[6], [3]],
    [[3], [3]],
    [[6], [3]]],

    [[[5], [5]],
    [[2], [5]],
    [[6], [5]]]],


    [[[[6], [5]],
    [[7], [7]],
    [[7], [5]]],

    [[[7], [7]],
    [[5], [6]],
    [[3], [6]]],

    [[[7], [4]],
    [[5], [5]],
    [[7], [4]]],

    [[[6], [6]],
    [[4], [7]],
    [[7], [6]]]]])

    const L = bb.arange(0, 100)
    const X = bb.ones([4, 3, 2])
    const Y = bb.ones([3, 1])


    this.expect(bb.add({ of: X, with: Y })).toEqual([[["2.00", "2.00"], ["2.00", "2.00"], ["2.00", "2.00"]], [["2.00", "2.00"], ["2.00", "2.00"], ["2.00", "2.00"]], [["2.00", "2.00"], ["2.00", "2.00"], ["2.00", "2.00"]], [["2.00", "2.00"], ["2.00", "2.00"], ["2.00", "2.00"]]])
    this.expect(new bb.cached.mean({ of: B }).invoke()).toEqual("-15.00")
    this.expect(new bb.cached.mean({ of: C }).invoke()).toEqual("16.67")
    this.expect(new bb.cached.mean({ of: K }).invoke()).toEqual("4.53")
    this.expect(new bb.cached.multiply({ of: B, with: 6 }).invoke()).toEqual([["-276.00", "114.00"], ["-228.00", "54.00"], ["54.00", "-90.00"], ["-150.00", "-198.00"]])
    this.expect(new bb.cached.min({ of: A }).invoke()).toEqual("-15.00")
    this.expect(new bb.cached.min({ of: A, axes: [0, 3] }).invoke()).toEqual([["17.00", "21.00", "-15.00"], ["-2.00", "-13.00", "-5.00"]])
    this.expect(new bb.cached.max({ of: A }).invoke()).toEqual("44.00")
    this.expect(new bb.cached.max({ of: A, axes: [0, 3] }).invoke()).toEqual([["44.00", "36.00", "21.00"], ["21.00", "24.00", "11.00"]])
    this.expect(new bb.cached.add({ of: B, with: B }).invoke()).toEqual([["-92.00", "38.00"], ["-76.00", "18.00"], ["18.00", "-30.00"], ["-50.00", "-66.00"]])
    this.expect(new bb.cached.multiply({ of: B, with: B }).invoke()).toEqual([["2116.00", "361.00"], ["1444.00", "81.00"], ["81.00", "225.00"], ["625.00", "1089.00"]])
    this.expect(new bb.cached.subtract({ of: B, with: B }).invoke()).toEqual(bb.zerosLike(B))
    this.expect(new bb.cached.min({ of: C.slice([':', 0, ':']) }).invoke()).toEqual('1.00')
    this.expect(new bb.cached.divide({ of: C.slice([':', 0, ':']), with: C.slice([':', 0, ':']) }).invoke()).toEqual([["1.00", "1.00", "1.00"], ["1.00", "1.00", "1.00"], ["1.00", "1.00", "1.00"]])
    this.expect(new bb.cached.mean({ of: B, axes: [1] }).invoke()).toEqual(["-13.50", "-14.50", "-3.00", "-29.00"])
    this.expect(new bb.cached.mean({ of: B, axes: [0] }).invoke()).toEqual(["-25.00", "-5.00"])
    this.expect(B.ravel()).toEqual(["-46.00", "19.00", "-38.00", "9.00", "9.00", "-15.00", "-25.00", "-33.00"])
    this.expect(B.T().ravel()).toEqual(["-46.00", "-38.00", "9.00", "-25.00", "19.00", "9.00", "-15.00", "-33.00"])
    this.expect(E.ravel()).toEqual(["1.00+1.00i", "10.00+10.00i", "100.00+100.00i", "1.00+1.00i", "10.00+10.00i", "100.00+100.00i", "1.00+1.00i", "10.00+10.00i", "100.00+100.00i", "1.00+1.00i", "10.00+10.00i", "100.00+100.00i"])
    this.expect(new bb.cached.add({ of: F, with: G }).invoke()).toEqual(H)
    this.expect(new bb.cached.add({ of: I, with: J }).invoke()).toEqual([[[[["4.00", "3.00"], ["2.00", "1.00"]], [["3.00", "5.00"], ["1.00", "3.00"]]], [[["2.00", "1.00"], ["6.00", "5.00"]], [["1.00", "3.00"], ["5.00", "7.00"]]]], [[[["4.00", "4.00"], ["2.00", "2.00"]], [["5.00", "3.00"], ["3.00", "1.00"]]], [[["2.00", "2.00"], ["6.00", "6.00"]], [["3.00", "1.00"], ["7.00", "5.00"]]]]])
    this.expect(new bb.cached.sin({ of: L }).invoke()).toEqual(["0.00", "0.84", "0.91", "0.14", "-0.76", "-0.96", "-0.28", "0.66", "0.99", "0.41", "-0.54", "-1.00", "-0.54", "0.42", "0.99", "0.65", "-0.29", "-0.96", "-0.75", "0.15", "0.91", "0.84", "-0.01", "-0.85", "-0.91", "-0.13", "0.76", "0.96", "0.27", "-0.66", "-0.99", "-0.40", "0.55", "1.00", "0.53", "-0.43", "-0.99", "-0.64", "0.30", "0.96", "0.75", "-0.16", "-0.92", "-0.83", "0.02", "0.85", "0.90", "0.12", "-0.77", "-0.95", "-0.26", "0.67", "0.99", "0.40", "-0.56", "-1.00", "-0.52", "0.44", "0.99", "0.64", "-0.30", "-0.97", "-0.74", "0.17", "0.92", "0.83", "-0.03", "-0.86", "-0.90", "-0.11", "0.77", "0.95", "0.25", "-0.68", "-0.99", "-0.39", "0.57", "1.00", "0.51", "-0.44", "-0.99", "-0.63", "0.31", "0.97", "0.73", "-0.18", "-0.92", "-0.82", "0.04", "0.86", "0.89", "0.11", "-0.78", "-0.95", "-0.25", "0.68", "0.98", "0.38", "-0.57", "-1.00"])
    this.expect(new bb.cached.cos({ of: L }).invoke()).toEqual(["1.00", "0.54", "-0.42", "-0.99", "-0.65", "0.28", "0.96", "0.75", "-0.15", "-0.91", "-0.84", "0.00", "0.84", "0.91", "0.14", "-0.76", "-0.96", "-0.28", "0.66", "0.99", "0.41", "-0.55", "-1.00", "-0.53", "0.42", "0.99", "0.65", "-0.29", "-0.96", "-0.75", "0.15", "0.91", "0.83", "-0.01", "-0.85", "-0.90", "-0.13", "0.77", "0.96", "0.27", "-0.67", "-0.99", "-0.40", "0.56", "1.00", "0.53", "-0.43", "-0.99", "-0.64", "0.30", "0.96", "0.74", "-0.16", "-0.92", "-0.83", "0.02", "0.85", "0.90", "0.12", "-0.77", "-0.95", "-0.26", "0.67", "0.99", "0.39", "-0.56", "-1.00", "-0.52", "0.44", "0.99", "0.63", "-0.31", "-0.97", "-0.74", "0.17", "0.92", "0.82", "-0.03", "-0.86", "-0.90", "-0.11", "0.78", "0.95", "0.25", "-0.68", "-0.98", "-0.38", "0.57", "1.00", "0.51", "-0.45", "-0.99", "-0.63", "0.32", "0.97", "0.73", "-0.18", "-0.93", "-0.82", "0.04"])

    console.log('\n\n-------- End Elementwise Suite --------\n\n')
})
