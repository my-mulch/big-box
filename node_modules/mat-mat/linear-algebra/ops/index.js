const ndim = require('multi-dim')

const {
    findPivot,
    swapRows,
    zeroOutColumn
} = require('../utils/rref-utils')

const {
    _helperMatMult,
    _helperAdd,
    _helperSubtract,
    show
} = require('../utils/matrix-utils')


function matMult(...matrices) {
    return matrices.reduce(_helperMatMult)
}

function add(...matrices) {
    return matrices.reduce(_helperAdd)
}

function subtract(...matrices) {
    return matrices.reduce(_helperSubtract)
}

function sum(A) {
    return ndim.generalReduce(A, function (acc, Ai) {
        return acc + Ai
    })
}

function norm(A) {
    const squaredNorm = ndim.generalReduce(A, function (acc, Ai) {
        return acc + Math.pow(Ai, 2)
    })

    return Math.sqrt(squaredNorm)
}

function scale(A, c) {
    return ndim.generalElementwise(A, null, function (Ai, _) {
        return Ai * c
    })
}

function square(A) {
    return ndim.generalElementwise(A, null, function (Ai, _) {
        return Math.pow(Ai, 2)
    })
}

function rref(A) {
    const matrix = [...A]
    const shape = ndim.shape(matrix)
    const [rows, columns] = shape

    let lead = 0, pivotRow = 0
    for (let row = 0; row < rows; row++) {
        if (lead >= columns) return matrix;

        [pivotRow, lead] = findPivot(matrix, lead, row, shape)
        // after we've found pivot, swap that row into position
        pivotRow = swapRows(matrix, pivotRow, row)
        scale(pivotRow, 1 / pivotRow[lead])

        zeroOutColumn(matrix, lead, row, shape)
        lead++
    }

    return matrix;
}

module.exports = {
    matMult,
    norm,
    rref,
    sum,
    show,
    add,
    subtract,
    scale,
    square
}
