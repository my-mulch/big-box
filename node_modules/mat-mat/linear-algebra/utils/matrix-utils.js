const ndim = require('multi-dim')

function _helperMatMult(A, B) {
    const [dim1, shared] = ndim.shape(A)
    const [_, dim2] = ndim.shape(B)
    const result = ndim.array([dim1, dim2])

    for (let i = 0; i < dim1; i++)
        for (let j = 0; j < dim2; j++)
            for (let k = 0; k < shared; k++)
                result[i][j] += A[i][k] * B[k][j]

    return result
}

function _helperAdd(A, B) {
    return ndim.generalElementwise(A, B, function (ai, bi) {
        return ai + bi
    })
}

function _helperSubtract(A, B) {
    return ndim.generalElementwise(A, B, function (ai, bi) {
        return ai - bi
    })
}


function show(A) {
    A.map(function (row) {
        console.log(
            row.map(function (num) {
                return Number(num).toFixed(2)
            })
        )
    })
    console.log()
}

module.exports = {
    _helperMatMult,
    _helperAdd,
    _helperSubtract,
    show
}
